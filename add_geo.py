#! /usr/bin/env python3
# -*- coding: utf-8 -*-
"""
This script updates all ships with a random geolocation within the Black sea.
Ships with a 'nearland' & 'mil_flag' will be within the nearland polygon

PREREQS

brew install geos
python3 -m pip install Shapely pymongo json
"""
import json
import pymongo

from shapely.geometry import Polygon, Point


def polygon_r_points (poly, num_points):
    '''creates random points within the defined polgyon'''
    min_x, min_y, max_x, max_y = poly.bounds
    points = []
    while len(points) < num_points:
            r_point = Point([random.uniform(min_x, max_x), random.uniform(min_y, max_y)])
            if (r_point.within(poly)):
                points.append(r_point)
    return points


### GEOCOORDINATES POLYGONS ###
#Black Sea Polygon: shoreside polygon
_black_sea_nearland_poly = Polygon([
    (40.98356240882237, 41.282781897853496),
    (41.21427529944737, 41.36528779823601),
    (41.35709756507237, 41.49707989758331),
    (41.58231729163487, 41.763958509286674),
    (41.51090615882237, 42.10313479109412),
    (41.33512490882237, 42.47698022128941),
    (41.14835733069737, 42.67922607695053),
    (40.62101358069737, 42.904962435021496),
    (40.00577920569737, 43.23802090757171),
    (39.34659951819737, 43.72428977494862),
    (38.704748601065575, 44.09735133070727),
    (37.919226140128075, 44.40033310693224),
    (37.776403874503075, 44.5297046324558),
    (37.084265202628075, 44.709562297434196),
    (37.034826726065575, 44.935545204204885),
    (35.727453679190575, 44.83435206301469),
    (34.727697819815575, 44.65769947190717),
    (34.161901921378075, 44.28530935935519),
    (33.458776921378075, 44.226293727650706),
    (33.05670886548728, 44.61365201589655),
    (33.18854480298728, 44.91007868601242),
    (32.58429675611228, 45.08487758605785),
    (32.07892566236228, 45.20885461103379),
    (32.32062488111228, 45.58685696804039),
    (33.00727038892478, 45.847658397769074),
    (31.963569217049777, 45.88973249168244),
    (31.551581912362277, 46.14911999968526),
    (31.073676638924777, 46.24037803346414),
    (30.689155154549777, 45.947054932745054),
    (30.013495974862277, 45.55609441770616),
    (29.958564334237277, 45.11977337816931),
    (29.876166873299777, 44.750353226900195),
    (29.892646365487277, 44.394259197723386),
    (30.595771365487277, 45.61376037789612),
    (31.282416873299777, 45.97378514004152),
    (31.892158084237277, 45.66752849794642),
    (31.765815310799777, 45.100389460232144),
    (32.44971423658103, 44.82053110649181),
    (32.65021472486228, 44.50797641204962),
    (33.20502429517478, 43.976719668905424),
    (34.680942487505575, 44.06084505883412),
    (35.515903425005575, 44.3954229468377),
    (36.817783307818075, 44.48954766822509),
    (37.892321116364414, 44.05961521087216),
    (38.93389994053571, 43.491193862079015),
    (40.46410226842902, 42.671948554757144),
    (40.88827112401364, 42.49641216852051),
    (41.03778177647321, 42.01910570555535),
    (40.91152803715751, 41.543232348033236),
    (39.62072351659177, 41.21276401661175),
    (40.19219064733527, 41.14516962152073),
    ])

#Black Sea Polygon: total sea
_black_sea_poly = Polygon([
    (30.984561585462675, 46.46891187955248),
    (29.863956116712675, 45.53408103964811),
    (29.721133851087675, 44.7826377198991),
    (29.127872132337675, 44.59518424565502),
    (28.754336976087675, 43.59314658564203),
    (28.623831186905527, 43.237209647478),
    (28.107473765030527, 43.201181891128414),
    (28.003103647843027, 42.767188916211715),
    (27.668020640030527, 42.52070985215561),
    (27.882254038468027, 42.23259511978961),
    (28.112966929093027, 42.106384096981785),
    (28.145925913468027, 41.8818417984186),
    (28.151419077530527, 41.73853892062605),
    (28.828020505339275, 41.36696475901539),
    (29.322405270964275, 41.28446098328286),
    (30.168352536589275, 41.197719610138265),
    (30.305681638151775, 41.27207640754927),
    (30.893450192839275, 41.15223771221637),
    (31.201067380339275, 41.17291521689157),
    (31.404314450651775, 41.37108720541105),
    (31.684465817839275, 41.506981366257925),
    (32.019548825651775, 41.634380241562134),
    (32.316179685026775, 41.81477292953034),
    (32.876482419401775, 41.949734976943425),
    (33.293962888151775, 42.088488553484964),
    (34.222307614714275, 42.031391394526324),
    (34.712112083439834, 42.03302108333025),
    (34.948318138127334, 42.16752166222456),
    (35.228469505314834, 42.110495653982476),
    (35.321853294377334, 42.04526019689577),
    (35.201003685002334, 41.91458813972471),
    (35.607497825627334, 41.68936926278737),
    (36.096389427189834, 41.77135862262859),
    (36.20476922409583, 41.6952077128291),
    (36.23223504440833, 41.50625230152081),
    (36.45196160690833, 41.300238715517025),
    (36.61675652878333, 41.44039901850899),
    (37.07818231003333, 41.33736935737473),
    (37.12762078659583, 41.25895763937243),
    (37.55059441940833, 41.10599068492658),
    (37.69341668503333, 41.19698707361493),
    (37.82525262253333, 41.15150466690897),
    (37.94060906784583, 41.06044513448751),
    (38.66570672409583, 41.02315711737034),
    (39.25896844284583, 41.16391209136424),
    (39.80279168503333, 41.110129624237025),
    (40.16534051315833, 41.03144516907623),
    (40.89339563759739, 41.256325610892446),
    (41.29439661415989, 41.45424457367854),
    (41.65694544228489, 41.79915375421377),
    (41.43721887978489, 42.35366236953998),
    (41.34383509072239, 42.621014874254165),
    (40.92086145790989, 42.9194143878333),
    (40.14217894931803, 43.212899344522945),
    (39.93069213291178, 43.35985038926813),
    (39.511838373146155, 43.586077283717536),
    (38.479123529396155, 44.203094572544515),
    (37.71927821668979, 44.52511739312194),
    (37.11503016981479, 44.89208758435437),
    (36.58219325575229, 45.08633654722981),
    (35.77402145464349, 44.923876930943486),
    (35.6357930662328, 45.050634194342486),
    (35.321783427822155, 44.88984529329328),
    (34.983953837978405, 44.720306596005905),
    (34.93039548836903, 44.75444924007036),
    (34.799932841884655, 44.75737481435997),
    (33.986944560634655, 44.31491841274355),
    (33.591436748134655, 44.39739915414177),
    (33.195928935634655, 44.55026964671915),
    (33.459600810634655, 44.7261610524718),
    (33.525518779384655, 44.97539927894869),
    (33.053106670009655, 45.111245225892645),
    (32.910284404384655, 45.28929504429212),
    (32.503790263759655, 45.25836988270863),
    (32.414722986549826, 45.49686549024858),
    (32.601490564674826, 45.58919983954326),
    (32.931080408424826, 45.754252982970144),
    (33.233204431862326, 45.827028392819926),
    (33.403492517799826, 45.94174347420349),
    (33.216724939674826, 46.044784527493384),
    (33.095875330299826, 45.95320195428541),
    (32.595997400612326, 45.98374632135876),
    (31.898365564674826, 46.10575536721314),
    (31.436939783424826, 46.27687472793531),
    (31.268428907100002, 46.54515361614848)
    ])

### declare mongodb ###
client = pymongo.MongoClient("mongodb+srv://main_user:musermuser@team10.3b42v.mongodb.net/fiftyone?retryWrites=true&w=majority")
db = client.fiftyone
collection = db.ships_updated

### filter pipelines ###
sea_pipeline = [
    {'$match': {
            'ground_truth.detections.Ship_location': {'$ne': 'nearland'}, 
        }}
]

nearland_pipeline = [
    {'$match': {
            'ground_truth.detections.Ship_location': 'nearland', 
        }}
]

#for all sea ships
print("--- ENTERING GEO DATA FOR ALL SEA SHIPS ---")
for doc in collection.aggregate(sea_pipeline):
    point = polygon_r_points(_black_sea_poly, 1)
    for p in point:
        x = p.y
        y = p.x
        in_point = '{"type":"Point","coordinates":[' + str(x) + ',' + str(y) + "]}"
    geos = { "$set": {"geolocation": json.loads(in_point)}}
    collection.update_one(doc, geos)

i = 0

#for all nearland ships
print("--- ENTERING GEO DATA FOR ALL NEARLAND SHIPS ---")
for doc in collection.aggregate(nearland_pipeline):
    point = polygon_r_points(_black_sea_nearland_poly, 1)
    for p in point:
        x = p.y
        y = p.x
        in_point = '{"type":"Point","coordinates":[' + str(x) + ',' + str(y) + "]}"
    geos = { "$set": {"geolocation": json.loads(in_point)}}
    collection.update_one(doc, geos)